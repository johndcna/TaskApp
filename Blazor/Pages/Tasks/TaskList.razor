@page "/tasks"
@using Blazor.Services
@using TaskApp.Shared.Models.Task
@inject TaskApiService TaskService
@inject NavigationManager NavManager

<h3>Tasks</h3>

<button @onclick="CreateNew">Create New Task</button>

@if (tasks == null)
{
    <p><em>Loading...</em></p>
}
else if (!tasks.Any())
{
    <p>No tasks found.</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Title</th>
                <th>Status</th>
                <th>Priority</th>
                <th>Due Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks)
            {
                <tr>
                    <td>@task.Title</td>
                    <td>@task.Status</td>
                    <td>@task.Priority</td>
                    <td>@(task.DueDate.HasValue ? task.DueDate.Value.ToString("MM/dd/yyyy") : "")</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-2" @onclick="() => EditTask(task.Id)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteTask(task.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<TaskDto>? tasks;

    protected override async Task OnInitializedAsync()
    {
        tasks = await TaskService.GetTasksAsync();
    }

    void CreateNew()
    {
        NavManager.NavigateTo("/tasks/create");
    }

    void EditTask(Guid id)
    {
        NavManager.NavigateTo($"/tasks/edit/{id}");
    }

    void DeleteTask(Guid id)
    {
        NavManager.NavigateTo($"/tasks/delete/{id}");
    }
}
